file_path,content
package.json,"{
  ""name"": ""activity-swipe"",
  ""version"": ""1.0.0"",
  ""type"": ""module"",
  ""scripts"": {
    ""dev"": ""vite"",
    ""build"": ""tsc && vite build"",
    ""preview"": ""vite preview"",
    ""lint"": ""eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0"",
    ""typecheck"": ""tsc --noEmit""
  },
  ""dependencies"": {
    ""react"": ""^18.3.1"",
    ""react-dom"": ""^18.3.1"",
    ""framer-motion"": ""^11.0.0"",
    ""lucide-react"": ""^0.400.0"",
    ""clsx"": ""^2.1.0""
  },
  ""devDependencies"": {
    ""@types/react"": ""^18.3.3"",
    ""@types/react-dom"": ""^18.3.0"",
    ""@typescript-eslint/eslint-plugin"": ""^7.13.1"",
    ""@typescript-eslint/parser"": ""^7.13.1"",
    ""@vitejs/plugin-react"": ""^4.3.1"",
    ""eslint"": ""^8.57.0"",
    ""eslint-plugin-react"": ""^7.34.1"",
    ""eslint-plugin-react-hooks"": ""^4.6.0"",
    ""eslint-plugin-react-refresh"": ""^0.4.7"",
    ""autoprefixer"": ""^10.4.19"",
    ""postcss"": ""^8.4.38"",
    ""tailwindcss"": ""^3.4.4"",
    ""typescript"": ""^5.2.2"",
    ""vite"": ""^5.3.1""
  }
}"
tsconfig.json,"{
  ""compilerOptions"": {
    ""target"": ""ES2020"",
    ""useDefineForClassFields"": true,
    ""lib"": [""ES2020"", ""DOM"", ""DOM.Iterable""],
    ""module"": ""ESNext"",
    ""skipLibCheck"": true,
    ""allowJs"": true,

    /* Bundler mode */
    ""moduleResolution"": ""bundler"",
    ""allowImportingTsExtensions"": true,
    ""resolveJsonModule"": true,
    ""isolatedModules"": true,
    ""noEmit"": true,
    ""jsx"": ""react-jsx"",

    /* Type checking */
    ""strict"": true,
    ""noUnusedLocals"": true,
    ""noUnusedParameters"": true,
    ""noFallthroughCasesInSwitch"": true,
    ""noImplicitAny"": true,
    ""strictNullChecks"": true,
    ""strictFunctionTypes"": true,

    /* Path mapping */
    ""baseUrl"": ""."",
    ""paths"": {
      ""@/*"": [""src/*""],
      ""@/components/*"": [""src/components/*""],
      ""@/data/*"": [""src/data/*""],
      ""@/types/*"": [""src/types/*""]
    }
  },
  ""include"": [""src""],
  ""exclude"": [""node_modules"", ""dist""],
  ""references"": [{ ""path"": ""./tsconfig.node.json"" }]
}"
src/types/index.ts,"// Types g√©n√©raux pour ActivitySwipe

export type ActivityCategory = 
  | 'art_creativity'
  | 'sport_fitness'
  | 'wellness'
  | 'culture'
  | 'learning'
  | 'gastronomy';

export type ActivityLevel = 'D√©butant' | 'Interm√©diaire' | 'Avanc√©' | 'Tous niveaux' | 'Facile';

export interface Activity {
  id: number;
  title: string;
  category: ActivityCategory;
  description: string;
  location: string;
  price: string;
  duration: string;
  level: ActivityLevel;
  image: string;
  liked?: boolean;
  likedAt?: Date;
}

export interface ActivityCategoryInfo {
  icon: string;
  label: string;
  color: string;
}

export type ActivityCategories = Record<ActivityCategory, ActivityCategoryInfo>;

export interface FavoriteActivity extends Activity {
  likedAt: Date;
}

// Types pour les props des composants
export interface WelcomeScreenProps {
  onStart: () => void;
}

export interface SwipeInterfaceProps {
  onActivityLiked: (activity: Activity) => void;
  favoritesCount: number;
}

export interface FavoritesScreenProps {
  favorites: FavoriteActivity[];
  onRemoveFavorite: (activityId: number) => void;
}

export interface NavigationProps {
  currentScreen: Screen;
  onNavigate: (screen: Screen) => void;
  favoritesCount: number;
}

export type Screen = 'welcome' | 'swipe' | 'favorites';

// Types pour les √©v√©nements
export interface SwipeEvent {
  direction: 'left' | 'right';
  activity: Activity;
}

// Types utilitaires
export interface Position {
  x: number;
  y: number;
}

export interface DragInfo {
  offset: Position;
  velocity: Position;
}
"
src/data/activities.ts,"import type { Activity, ActivityCategories, ActivityCategory } from '@/types';

export const activityCategories: ActivityCategories = {
  art_creativity: {
    icon: ""üé®"",
    label: ""Art & Cr√©ativit√©"", 
    color: ""#FF6B6B""
  },
  sport_fitness: {
    icon: ""üèÉ‚Äç‚ôÇÔ∏è"",
    label: ""Sport & Fitness"",
    color: ""#4ECDC4""
  },
  wellness: {
    icon: ""üßò‚Äç‚ôÄÔ∏è"", 
    label: ""Bien-√™tre"",
    color: ""#95A5A6""
  },
  culture: {
    icon: ""üé≠"",
    label: ""Culture"",
    color: ""#9B59B6""
  },
  learning: {
    icon: ""üî¨"",
    label: ""Apprentissage"",
    color: ""#3498DB""
  },
  gastronomy: {
    icon: ""üç≥"",
    label: ""Gastronomie"", 
    color: ""#F39C12""
  }
} as const;

export const activities: Activity[] = [
  {
    id: 1,
    title: ""Cours de Poterie Cr√©ative"",
    category: ""art_creativity"" as ActivityCategory,
    description: ""Apprenez les techniques de base du tournage et cr√©ez vos propres ≈ìuvres uniques. D√©couvrez l'art ancestral de la c√©ramique dans un atelier convivial."",
    location: ""Centre Culturel, Morges"",
    price: ""CHF 45"",
    duration: ""2h"",
    level: ""D√©butant"",
    image: ""https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400&h=300&fit=crop&q=80""
  },
  {
    id: 2,
    title: ""Escalade en Salle"",
    category: ""sport_fitness"" as ActivityCategory, 
    description: ""D√©fiez vos limites sur nos murs d'escalade avec accompagnement professionnel. √âquipement fourni, tous niveaux bienvenus."",
    location: ""Vertical World, Lausanne"",
    price: ""CHF 25"",
    duration: ""1h30"", 
    level: ""Tous niveaux"",
    image: ""https://images.unsplash.com/photo-1544551763-46a013bb70d5?w=400&h=300&fit=crop&q=80""
  },
  {
    id: 3,
    title: ""M√©ditation Pleine Conscience"",
    category: ""wellness"" as ActivityCategory,
    description: ""S√©ance de m√©ditation guid√©e pour r√©duire le stress et retrouver la s√©r√©nit√©. Dans un cadre naturel apaisant face au lac."",
    location: ""Parc de l'Aubonne, Allaman"", 
    price: ""CHF 20"",
    duration: ""1h"",
    level: ""Tous niveaux"",
    image: ""https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=400&h=300&fit=crop&q=80""
  },
  {
    id: 4,
    title: ""Atelier Peinture Aquarelle"",
    category: ""art_creativity"" as ActivityCategory,
    description: ""Explorez les techniques de l'aquarelle en peignant des paysages lacustres. Mat√©riel fourni, ambiance d√©tendue garantie."",
    location: ""Atelier d'Art, St-Prex"",
    price: ""CHF 55"", 
    duration: ""2h30"",
    level: ""Interm√©diaire"",
    image: ""https://images.unsplash.com/photo-1513475382585-d06e58bcb0e0?w=400&h=300&fit=crop&q=80""
  },
  {
    id: 5,
    title: ""Cours de Cuisine Italienne"",
    category: ""gastronomy"" as ActivityCategory,
    description: ""Ma√Ætrisez l'art des p√¢tes fra√Æches et des sauces traditionnelles. D√©gustation incluse avec un verre de vin italien."",
    location: ""√âcole Culinaire, Nyon"",
    price: ""CHF 85"",
    duration: ""3h"",
    level: ""D√©butant"", 
    image: ""https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?w=400&h=300&fit=crop&q=80""
  },
  {
    id: 6,
    title: ""Yoga Matinal au Lac"",
    category: ""wellness"" as ActivityCategory,
    description: ""R√©veillez votre corps en douceur face au magnifique Lac L√©man. S√©ance adapt√©e √† tous les niveaux, tapis fournis."",
    location: ""Plage de St-Prex"", 
    price: ""CHF 25"",
    duration: ""1h"",
    level: ""D√©butant"",
    image: ""https://images.unsplash.com/photo-1544367567-0f2fcb009e0b?w=400&h=300&fit=crop&q=80""
  },
  {
    id: 7,
    title: ""Initiation √† l'Astronomie"",
    category: ""learning"" as ActivityCategory,
    description: ""D√©couvrez les myst√®res du ciel nocturne avec t√©lescopes professionnels. Observation des plan√®tes et constellations."",
    location: ""Observatoire, Signal de Bougy"",
    price: ""CHF 35"",
    duration: ""2h"",
    level: ""D√©butant"",
    image: ""https://images.unsplash.com/photo-1446776876053-832298503137?w=400&h=300&fit=crop&q=80""
  },
  {
    id: 8,
    title: ""Danse Salsa D√©butants"", 
    category: ""culture"" as ActivityCategory,
    description: ""Apprenez les pas de base de la salsa dans une ambiance conviviale. Venez seul(e) ou en couple, bonne humeur garantie !"",
    location: ""Salle Communale, Rolle"", 
    price: ""CHF 30"",
    duration: ""1h15"",
    level: ""D√©butant"",
    image: ""https://images.unsplash.com/photo-1504609813442-a8924e83f76e?w=400&h=300&fit=crop&q=80""
  },
  {
    id: 9,
    title: ""D√©gustation de Vins Locaux"",
    category: ""gastronomy"" as ActivityCategory,
    description: ""D√©couverte des c√©pages vaudois avec un sommelier exp√©riment√©. D√©gustation de 5 vins accompagn√©s de mets locaux."",
    location: ""Cave Viticole, F√©chy"",
    price: ""CHF 45"", 
    duration: ""2h"",
    level: ""Tous niveaux"", 
    image: ""https://images.unsplash.com/photo-1510812431401-41d2bd2722f3?w=400&h=300&fit=crop&q=80""
  },
  {
    id: 10,
    title: ""Randonn√©e Urbaine Lausanne"",
    category: ""sport_fitness"" as ActivityCategory,
    description: ""Explorez les quartiers cach√©s de Lausanne avec un guide local. Histoire, architecture et points de vue secrets."",
    location: ""Gare CFF, Lausanne"",
    price: ""CHF 15"", 
    duration: ""2h30"",
    level: ""Facile"",
    image: ""https://images.unsplash.com/photo-1551698618-1dfe5d97d256?w=400&h=300&fit=crop&q=80""
  },
  {
    id: 11,
    title: ""Atelier Photographie Portrait"", 
    category: ""art_creativity"" as ActivityCategory,
    description: ""Ma√Ætrisez l'art du portrait avec √©clairage professionnel. Mod√®les fournis, √©quipement haut de gamme disponible."",
    location: ""Studio Photo, Morges"",
    price: ""CHF 75"",
    duration: ""3h"", 
    level: ""Interm√©diaire"",
    image: ""https://images.unsplash.com/photo-1606983340126-99ab4feaa64a?w=400&h=300&fit=crop&q=80""
  },
  {
    id: 12,
    title: ""Jardinage Urbain Bio"", 
    category: ""learning"" as ActivityCategory,
    description: ""Cr√©ez votre potager urbain et cultivez vos l√©gumes bio. Techniques de permaculture et compostage incluses."",
    location: ""Jardin Communautaire, Allaman"",
    price: ""CHF 40"",
    duration: ""2h"",
    level: ""D√©butant"",
    image: ""https://images.unsplash.com/photo-1416879595882-3373a0480b5b?w=400&h=300&fit=crop&q=80""
  },
  {
    id: 13,
    title: ""Atelier Chocolat Artisanal"",
    category: ""gastronomy"" as ActivityCategory, 
    description: ""Fabriquez vos propres chocolats fins avec un ma√Ætre chocolatier. D√©gustation et repartez avec vos cr√©ations !"",
    location: ""Chocolaterie, Vevey"",
    price: ""CHF 65"",
    duration: ""2h30"",
    level: ""Tous niveaux"",
    image: ""https://images.unsplash.com/photo-1511381939415-e44015466834?w=400&h=300&fit=crop&q=80""
  },
  {
    id: 14,
    title: ""Calligraphie Moderne"", 
    category: ""art_creativity"" as ActivityCategory,
    description: ""Apprenez l'art de la belle √©criture moderne et d√©corative. Id√©al pour cr√©er des invitations et cartes personnalis√©es."",
    location: ""Maison des Associations, Nyon"",
    price: ""CHF 50"",
    duration: ""2h"",
    level: ""D√©butant"",
    image: ""https://images.unsplash.com/photo-1455390582262-044cdead277a?w=400&h=300&fit=crop&q=80""
  },
  {
    id: 15,
    title: ""Th√©√¢tre d'Improvisation"",
    category: ""culture"" as ActivityCategory,
    description: ""Lib√©rez votre cr√©ativit√© avec des exercices d'impro ludiques. D√©veloppez votre confiance en vous dans la bonne humeur !"",
    location: ""Th√©√¢tre de Poche, Gland"", 
    price: ""CHF 35"",
    duration: ""2h"",
    level: ""D√©butant"",
    image: ""https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=300&fit=crop&q=80""
  }
];

// Fonction utilitaire typ√©e pour obtenir une cat√©gorie
export const getCategoryInfo = (categoryId: ActivityCategory) => {
  return activityCategories[categoryId];
};

// Fonction pour filtrer les activit√©s par cat√©gorie
export const getActivitiesByCategory = (category: ActivityCategory): Activity[] => {
  return activities.filter(activity => activity.category === category);
};

// Fonction pour obtenir une activit√© par ID
export const getActivityById = (id: number): Activity | undefined => {
  return activities.find(activity => activity.id === id);
};
"
src/App.tsx,"import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import WelcomeScreen from '@/components/WelcomeScreen';
import SwipeInterface from '@/components/SwipeInterface';
import FavoritesScreen from '@/components/FavoritesScreen';
import Navigation from '@/components/Navigation';
import type { Screen, Activity, FavoriteActivity } from '@/types';

interface AppState {
  currentScreen: Screen;
  favorites: FavoriteActivity[];
  showStats: boolean;
}

const App: React.FC = () => {
  const [currentScreen, setCurrentScreen] = useState<Screen>('welcome');
  const [favorites, setFavorites] = useState<FavoriteActivity[]>([]);
  const [showStats, setShowStats] = useState<boolean>(false);

  const addToFavorites = (activity: Activity): void => {
    const favoriteActivity: FavoriteActivity = { 
      ...activity, 
      likedAt: new Date() 
    };

    setFavorites(prev => [...prev, favoriteActivity]);
    setShowStats(true);

    // Auto-hide stats notification
    setTimeout(() => setShowStats(false), 2000);
  };

  const removeFromFavorites = (activityId: number): void => {
    setFavorites(prev => prev.filter(fav => fav.id !== activityId));
  };

  const handleNavigate = (screen: Screen): void => {
    setCurrentScreen(screen);
  };

  const screenVariants = {
    initial: { opacity: 0, x: 300 },
    in: { opacity: 1, x: 0 },
    out: { opacity: 0, x: -300 }
  };

  const renderScreen = (): JSX.Element => {
    switch(currentScreen) {
      case 'welcome':
        return <WelcomeScreen onStart={() => setCurrentScreen('swipe')} />;
      case 'swipe':
        return (
          <SwipeInterface
            onActivityLiked={addToFavorites}
            favoritesCount={favorites.length}
          />
        );
      case 'favorites':
        return (
          <FavoritesScreen
            favorites={favorites}
            onRemoveFavorite={removeFromFavorites}
          />
        );
      default:
        return <WelcomeScreen onStart={() => setCurrentScreen('swipe')} />;
    }
  };

  return (
    <div className=""min-h-screen bg-gradient-to-br from-indigo-500 via-purple-500 to-pink-500 relative overflow-hidden"">
      {/* Background decoration */}
      <div className=""absolute inset-0 bg-[url('data:image/svg+xml,%3Csvg width=\""20\"" height=\""20\"" viewBox=\""0 0 20 20\"" xmlns=\""http://www.w3.org/2000/svg\""%3E%3Cg fill=\""%23ffffff\"" fill-opacity=\""0.03\""%3E%3Cpath d=\""m0 0h20v20h-20z\""/%3E%3C/g%3E%3C/svg%3E')] opacity-40"" />

      {/* Stats notification */}
      <AnimatePresence>
        {showStats && (
          <motion.div
            initial={{ opacity: 0, y: -50 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -50 }}
            className=""fixed top-4 left-1/2 transform -translate-x-1/2 z-50""
          >
            <div className=""bg-green-500 text-white px-6 py-3 rounded-full shadow-lg"">
              <span className=""font-medium"">
                ‚ù§Ô∏è {favorites.length} activit√©{favorites.length > 1 ? 's' : ''} aim√©e{favorites.length > 1 ? 's' : ''} !
              </span>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Main content */}
      <AnimatePresence mode=""wait"">
        <motion.div
          key={currentScreen}
          initial=""initial""
          animate=""in""
          exit=""out""
          variants={screenVariants}
          transition={{ duration: 0.3 }}
          className=""h-screen""
        >
          {renderScreen()}
        </motion.div>
      </AnimatePresence>

      {/* Navigation - masqu√©e sur l'√©cran d'accueil */}
      {currentScreen !== 'welcome' && (
        <Navigation
          currentScreen={currentScreen}
          onNavigate={handleNavigate}
          favoritesCount={favorites.length}
        />
      )}
    </div>
  );
};

export default App;
"
src/main.tsx,"import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'

const rootElement = document.getElementById('root');

if (!rootElement) {
  throw new Error('Failed to find the root element');
}

ReactDOM.createRoot(rootElement).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
"
src/components/WelcomeScreen.tsx,"import React from 'react';
import { motion } from 'framer-motion';
import { Sparkles, ArrowRight } from 'lucide-react';
import type { WelcomeScreenProps } from '@/types';

const WelcomeScreen: React.FC<WelcomeScreenProps> = ({ onStart }) => {
  const floatingIcons: string[] = [""üé®"", ""üèÉ‚Äç‚ôÇÔ∏è"", ""üßò‚Äç‚ôÄÔ∏è"", ""üé≠"", ""üî¨"", ""üç≥""];

  const handleStart = (): void => {
    onStart();
  };

  return (
    <div className=""h-screen flex flex-col items-center justify-center px-6 relative"">
      {/* Floating icons */}
      {floatingIcons.map((icon: string, index: number) => (
        <motion.div
          key={`${icon}-${index}`}
          className=""absolute text-4xl opacity-20 select-none pointer-events-none""
          initial={{ 
            x: Math.random() * (typeof window !== 'undefined' ? window.innerWidth : 800),
            y: Math.random() * (typeof window !== 'undefined' ? window.innerHeight : 600)
          }}
          animate={{
            y: [0, -20, 0],
            rotate: [0, 10, -10, 0]
          }}
          transition={{
            duration: 3 + Math.random() * 2,
            repeat: Infinity,
            delay: Math.random() * 2
          }}
          style={{
            left: `${10 + (index * 15)}%`,
            top: `${20 + (index * 10)}%`
          }}
        >
          {icon}
        </motion.div>
      ))}

      {/* Main content */}
      <motion.div
        initial={{ opacity: 0, y: 50 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.8, delay: 0.2 }}
        className=""text-center z-10""
      >
        {/* Logo */}
        <motion.div
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          transition={{ duration: 0.5, delay: 0.5 }}
          className=""mb-8""
        >
          <div className=""w-24 h-24 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center mx-auto mb-4"">
            <Sparkles className=""w-12 h-12 text-white"" />
          </div>
          <h1 className=""text-5xl font-bold text-white mb-2"">
            Activity
            <span className=""bg-gradient-to-r from-yellow-300 to-pink-300 bg-clip-text text-transparent"">
              Swipe
            </span>
          </h1>
        </motion.div>

        {/* Tagline */}
        <motion.p
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 1 }}
          className=""text-xl text-white/90 mb-12 max-w-md mx-auto leading-relaxed""
        >
          D√©couvrez votre prochaine passion pr√®s de chez vous
        </motion.p>

        {/* Start button */}
        <motion.button
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 1.2 }}
          whileHover={{ 
            scale: 1.05, 
            boxShadow: ""0 20px 40px rgba(0,0,0,0.1)"" 
          }}
          whileTap={{ scale: 0.95 }}
          onClick={handleStart}
          className=""bg-white text-gray-800 px-8 py-4 rounded-full font-semibold text-lg shadow-lg flex items-center gap-3 mx-auto hover:bg-gray-50 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-white focus:ring-opacity-50""
          aria-label=""Commencer √† d√©couvrir des activit√©s""
        >
          Commencer √† d√©couvrir
          <ArrowRight className=""w-5 h-5"" />
        </motion.button>

        {/* Features preview */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 1.5 }}
          className=""mt-16 grid grid-cols-3 gap-4 max-w-sm mx-auto""
        >
          {[
            { icon: ""üé®"", label: ""Art"" },
            { icon: ""üèÉ‚Äç‚ôÇÔ∏è"", label: ""Sport"" },
            { icon: ""üç≥"", label: ""Cuisine"" }
          ].map((item, index: number) => (
            <div key={`${item.label}-${index}`} className=""text-center"">
              <div className=""text-2xl mb-1"" role=""img"" aria-label={item.label}>
                {item.icon}
              </div>
              <div className=""text-white/70 text-sm"">{item.label}</div>
            </div>
          ))}
        </motion.div>
      </motion.div>
    </div>
  );
};

export default WelcomeScreen;
"
src/components/SwipeInterface.tsx,"import React, { useState, useEffect, useCallback } from 'react';
import { motion, AnimatePresence, PanInfo } from 'framer-motion';
import { Heart, X, RotateCcw, MapPin, Clock, DollarSign, Star } from 'lucide-react';
import { activities, activityCategories } from '@/data/activities';
import type { SwipeInterfaceProps, Activity, ActivityCategoryInfo } from '@/types';

type SwipeDirection = 'left' | 'right' | null;

interface SwipeState {
  currentIndex: number;
  dragDirection: SwipeDirection;
  isAnimating: boolean;
}

const SwipeInterface: React.FC<SwipeInterfaceProps> = ({ 
  onActivityLiked, 
  favoritesCount 
}) => {
  const [state, setState] = useState<SwipeState>({
    currentIndex: 0,
    dragDirection: null,
    isAnimating: false
  });

  const { currentIndex, dragDirection, isAnimating } = state;
  const currentActivity: Activity | undefined = activities[currentIndex];
  const hasMoreActivities: boolean = currentIndex < activities.length - 1;

  // Pr√©chargement des images
  useEffect(() => {
    const preloadNextImage = (): void => {
      if (currentIndex + 2 < activities.length) {
        const img = new Image();
        img.src = activities[currentIndex + 1].image;
      }
    };

    preloadNextImage();
  }, [currentIndex]);

  const handleSwipe = useCallback((direction: 'left' | 'right'): void => {
    if (isAnimating || !currentActivity) return;

    setState(prev => ({
      ...prev,
      isAnimating: true,
      dragDirection: direction
    }));

    if (direction === 'right') {
      onActivityLiked(currentActivity);
    }

    setTimeout(() => {
      setState(prev => ({
        currentIndex: hasMoreActivities ? prev.currentIndex + 1 : 0,
        dragDirection: null,
        isAnimating: false
      }));
    }, 300);
  }, [currentActivity, isAnimating, hasMoreActivities, onActivityLiked]);

  const handleDragEnd = useCallback((_: Event, info: PanInfo): void => {
    const threshold = 150;
    const velocity = Math.abs(info.velocity.x);

    if (Math.abs(info.offset.x) > threshold || velocity > 500) {
      handleSwipe(info.offset.x > 0 ? 'right' : 'left');
    }
  }, [handleSwipe]);

  const handleUndo = useCallback((): void => {
    if (currentIndex === 0 || isAnimating) return;

    setState(prev => ({
      ...prev,
      currentIndex: Math.max(0, prev.currentIndex - 1)
    }));
  }, [currentIndex, isAnimating]);

  const handleRestart = useCallback((): void => {
    setState({
      currentIndex: 0,
      dragDirection: null,
      isAnimating: false
    });
  }, []);

  // √âcran de fin
  if (!currentActivity) {
    return (
      <div className=""h-screen flex items-center justify-center"">
        <div className=""text-center text-white max-w-sm mx-auto px-6"">
          <motion.div
            initial={{ scale: 0 }}
            animate={{ scale: 1 }}
            className=""text-6xl mb-6""
          >
            üéâ
          </motion.div>
          <h2 className=""text-2xl font-bold mb-4"">
            Toutes les activit√©s d√©couvertes !
          </h2>
          <p className=""opacity-80 mb-6"">
            Vous avez parcouru toutes nos suggestions. Envie de recommencer ?
          </p>
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={handleRestart}
            className=""bg-white text-gray-800 px-8 py-3 rounded-full font-semibold shadow-lg hover:bg-gray-50 transition-colors""
          >
            Recommencer l'exploration
          </motion.button>
        </div>
      </div>
    );
  }

  const category: ActivityCategoryInfo = activityCategories[currentActivity.category];

  return (
    <div className=""h-screen pt-16 pb-32 px-4 flex flex-col"">
      {/* Header */}
      <div className=""text-center mb-6"">
        <h1 className=""text-2xl font-bold text-white mb-2"">D√©couvrez</h1>
        <div className=""text-white/80"">
          ‚ù§Ô∏è {favoritesCount} activit√©{favoritesCount !== 1 ? 's' : ''} aim√©e{favoritesCount !== 1 ? 's' : ''}
        </div>
      </div>

      {/* Cards Stack */}
      <div className=""flex-1 relative max-w-sm mx-auto w-full"">
        <AnimatePresence>
          {/* Next card (background) */}
          {activities[currentIndex + 1] && (
            <motion.div
              key={`next-${currentIndex + 1}`}
              className=""absolute inset-0 activity-card p-6 transform scale-95 opacity-50""
              style={{ zIndex: 1 }}
            >
              <div className=""h-full bg-gray-200 rounded-2xl"" />
            </motion.div>
          )}

          {/* Current card */}
          <motion.div
            key={`current-${currentIndex}`}
            drag=""x""
            dragConstraints={{ left: 0, right: 0 }}
            dragElastic={0.2}
            onDragEnd={handleDragEnd}
            whileDrag={{ 
              scale: 1.02, 
              rotate: dragDirection === 'right' ? 5 : dragDirection === 'left' ? -5 : 0 
            }}
            initial={{ scale: 0.8, opacity: 0 }}
            animate={{ 
              scale: 1, 
              opacity: 1,
              x: dragDirection === 'right' ? 1000 : dragDirection === 'left' ? -1000 : 0,
              rotate: dragDirection === 'right' ? 30 : dragDirection === 'left' ? -30 : 0
            }}
            transition={{ duration: dragDirection ? 0.3 : 0.5 }}
            className=""absolute inset-0 activity-card cursor-grab active:cursor-grabbing select-none""
            style={{ zIndex: 2 }}
          >
            <div className=""h-full flex flex-col"">
              {/* Image */}
              <div className=""h-1/2 relative overflow-hidden rounded-t-3xl"">
                <img
                  src={currentActivity.image}
                  alt={`Image de l'activit√©: ${currentActivity.title}`}
                  className=""w-full h-full object-cover""
                  loading=""lazy""
                />
                <div className=""absolute top-4 left-4"">
                  <div 
                    className=""category-badge""
                    style={{ borderLeft: `4px solid ${category.color}` }}
                  >
                    <span className=""mr-2"" role=""img"" aria-label={category.label}>
                      {category.icon}
                    </span>
                    <span>{category.label}</span>
                  </div>
                </div>
                <div className=""absolute top-4 right-4"">
                  <div className=""category-badge"">
                    <Star className=""w-3 h-3 mr-1"" />
                    <span>{currentActivity.level}</span>
                  </div>
                </div>
              </div>

              {/* Content */}
              <div className=""flex-1 p-6 flex flex-col"">
                <h2 className=""text-xl font-bold text-gray-800 mb-2"">
                  {currentActivity.title}
                </h2>

                <p className=""text-gray-600 text-sm mb-4 flex-1"">
                  {currentActivity.description}
                </p>

                {/* Info grid */}
                <div className=""space-y-3"">
                  <div className=""flex items-center text-gray-700 text-sm"">
                    <MapPin className=""w-4 h-4 mr-2 text-blue-500 flex-shrink-0"" />
                    <span className=""truncate"">{currentActivity.location}</span>
                  </div>

                  <div className=""flex items-center justify-between"">
                    <div className=""flex items-center text-gray-700 text-sm"">
                      <Clock className=""w-4 h-4 mr-2 text-green-500 flex-shrink-0"" />
                      <span>{currentActivity.duration}</span>
                    </div>

                    <div className=""flex items-center text-gray-700 text-sm"">
                      <DollarSign className=""w-4 h-4 mr-2 text-orange-500 flex-shrink-0"" />
                      <span className=""font-semibold"">{currentActivity.price}</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </motion.div>
        </AnimatePresence>
      </div>

      {/* Action buttons */}
      <div className=""flex justify-center items-center gap-6 mt-8"">
        <motion.button
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 0.9 }}
          onClick={() => handleSwipe('left')}
          disabled={isAnimating}
          className=""w-16 h-16 bg-white rounded-full shadow-lg flex items-center justify-center disabled:opacity-50 focus:outline-none focus:ring-2 focus:ring-red-300""
          aria-label=""Rejeter cette activit√©""
        >
          <X className=""w-8 h-8 text-red-500"" />
        </motion.button>

        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onClick={handleUndo}
          disabled={currentIndex === 0 || isAnimating}
          className=""w-12 h-12 bg-white/80 rounded-full shadow-lg flex items-center justify-center disabled:opacity-30 focus:outline-none focus:ring-2 focus:ring-gray-300""
          aria-label=""Revenir √† l'activit√© pr√©c√©dente""
        >
          <RotateCcw className=""w-5 h-5 text-gray-600"" />
        </motion.button>

        <motion.button
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 0.9 }}
          onClick={() => handleSwipe('right')}
          disabled={isAnimating}
          className=""w-16 h-16 bg-white rounded-full shadow-lg flex items-center justify-center disabled:opacity-50 focus:outline-none focus:ring-2 focus:ring-green-300""
          aria-label=""Aimer cette activit√©""
        >
          <Heart className=""w-8 h-8 text-green-500"" />
        </motion.button>
      </div>

      {/* Progress indicator */}
      <div className=""mt-6"">
        <div className=""flex justify-center gap-1"">
          {Array.from({ length: Math.min(5, activities.length) }).map((_, index: number) => (
            <div
              key={`progress-${index}`}
              className={`w-2 h-2 rounded-full transition-all ${
                index <= currentIndex ? 'bg-white' : 'bg-white/30'
              }`}
            />
          ))}
        </div>
      </div>
    </div>
  );
};

export default SwipeInterface;
"
src/components/FavoritesScreen.tsx,"import React, { useMemo, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Heart, MapPin, Clock, DollarSign, Trash2, Calendar, Star } from 'lucide-react';
import { activityCategories } from '@/data/activities';
import type { FavoritesScreenProps, ActivityCategoryInfo, ActivityCategory } from '@/types';

interface CategoryStats {
  [categoryLabel: string]: number;
}

const FavoritesScreen: React.FC<FavoritesScreenProps> = ({ 
  favorites, 
  onRemoveFavorite 
}) => {
  // Calcul des statistiques des cat√©gories pr√©f√©r√©es
  const categoryStats = useMemo((): CategoryStats => {
    return favorites.reduce((acc: CategoryStats, activity) => {
      const category: ActivityCategoryInfo = activityCategories[activity.category];
      acc[category.label] = (acc[category.label] || 0) + 1;
      return acc;
    }, {});
  }, [favorites]);

  const topCategories = useMemo(() => {
    return Object.entries(categoryStats)
      .sort(([, a], [, b]) => b - a)
      .slice(0, 3);
  }, [categoryStats]);

  const handleRemoveFavorite = useCallback((activityId: number): void => {
    onRemoveFavorite(activityId);
  }, [onRemoveFavorite]);

  const handleReserveActivity = useCallback((activityId: number): void => {
    // Simulation de r√©servation
    console.log(`R√©servation de l'activit√© ${activityId}`);
    // Ici on pourrait ouvrir un modal de r√©servation ou rediriger vers un syst√®me externe
  }, []);

  // √âcran vide si aucun favori
  if (favorites.length === 0) {
    return (
      <div className=""h-screen flex flex-col items-center justify-center px-6"">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className=""text-center max-w-sm""
        >
          <div className=""w-24 h-24 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-6"">
            <Heart className=""w-12 h-12 text-white/50"" />
          </div>
          <h2 className=""text-2xl font-bold text-white mb-4"">
            Aucune activit√© favorite
          </h2>
          <p className=""text-white/80 text-center"">
            Commencez √† swiper pour d√©couvrir des activit√©s qui vous passionnent !
          </p>
        </motion.div>
      </div>
    );
  }

  return (
    <div className=""h-screen pt-16 pb-32 px-4"">
      {/* Header */}
      <div className=""text-center mb-6"">
        <h1 className=""text-2xl font-bold text-white mb-2"">Mes Favoris</h1>
        <p className=""text-white/80"">
          {favorites.length} activit√©{favorites.length !== 1 ? 's' : ''} qui vous {favorites.length !== 1 ? 'int√©ressent' : 'int√©resse'}
        </p>
      </div>

      {/* Favorites list */}
      <div className=""max-w-md mx-auto space-y-4 overflow-y-auto max-h-[calc(100vh-250px)] pb-4"">
        <AnimatePresence>
          {favorites.map((activity, index: number) => {
            const category: ActivityCategoryInfo = activityCategories[activity.category];

            return (
              <motion.div
                key={activity.id}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: 20, scale: 0.9 }}
                transition={{ delay: index * 0.1 }}
                layout
                className=""activity-card p-4 group""
              >
                <div className=""flex gap-4"">
                  {/* Image */}
                  <div className=""w-20 h-20 flex-shrink-0"">
                    <img
                      src={activity.image}
                      alt={`${activity.title}`}
                      className=""w-full h-full object-cover rounded-xl""
                      loading=""lazy""
                    />
                  </div>

                  {/* Content */}
                  <div className=""flex-1 min-w-0"">
                    <div className=""flex items-start justify-between mb-2"">
                      <h3 className=""font-semibold text-gray-800 text-sm leading-tight"">
                        {activity.title}
                      </h3>
                      <button
                        onClick={() => handleRemoveFavorite(activity.id)}
                        className=""opacity-0 group-hover:opacity-100 transition-opacity p-1 hover:bg-red-50 rounded focus:outline-none focus:ring-2 focus:ring-red-300""
                        aria-label={`Supprimer ${activity.title} des favoris`}
                      >
                        <Trash2 className=""w-4 h-4 text-red-500"" />
                      </button>
                    </div>

                    {/* Category badge */}
                    <div 
                      className=""inline-flex items-center px-2 py-1 rounded-full text-xs mb-2""
                      style={{ 
                        backgroundColor: `${category.color}20`,
                        color: category.color 
                      }}
                    >
                      <span className=""mr-1"" role=""img"" aria-label={category.label}>
                        {category.icon}
                      </span>
                      <span>{category.label}</span>
                    </div>

                    {/* Info */}
                    <div className=""space-y-1"">
                      <div className=""flex items-center text-xs text-gray-600"">
                        <MapPin className=""w-3 h-3 mr-1 flex-shrink-0"" />
                        <span className=""truncate"">{activity.location}</span>
                      </div>

                      <div className=""flex items-center justify-between text-xs"">
                        <div className=""flex items-center text-gray-600"">
                          <Clock className=""w-3 h-3 mr-1 flex-shrink-0"" />
                          <span>{activity.duration}</span>
                        </div>

                        <div className=""flex items-center text-gray-800 font-semibold"">
                          <DollarSign className=""w-3 h-3 mr-1 flex-shrink-0"" />
                          <span>{activity.price}</span>
                        </div>
                      </div>

                      <div className=""flex items-center text-xs text-gray-600"">
                        <Star className=""w-3 h-3 mr-1 flex-shrink-0"" />
                        <span>{activity.level}</span>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Action button */}
                <div className=""mt-3 pt-3 border-t border-gray-100"">
                  <button 
                    onClick={() => handleReserveActivity(activity.id)}
                    className=""w-full bg-gradient-to-r from-blue-500 to-purple-600 text-white py-2 px-4 rounded-lg text-sm font-medium hover:from-blue-600 hover:to-purple-700 transition-all flex items-center justify-center gap-2 focus:outline-none focus:ring-2 focus:ring-blue-300""
                    aria-label={`R√©server l'activit√© ${activity.title}`}
                  >
                    <Calendar className=""w-4 h-4"" />
                    R√©server cette activit√©
                  </button>
                </div>
              </motion.div>
            );
          })}
        </AnimatePresence>
      </div>

      {/* Stats */}
      {favorites.length > 0 && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.5 }}
          className=""mt-6 max-w-md mx-auto""
        >
          <div className=""bg-white/20 backdrop-blur-sm rounded-2xl p-4"">
            <h3 className=""text-white font-medium mb-3 text-center"">
              Vos pr√©f√©rences
            </h3>
            <div className=""grid grid-cols-3 gap-2"">
              {topCategories.map(([categoryLabel, count], index: number) => (
                <div key={`stat-${categoryLabel}-${index}`} className=""text-center"">
                  <div className=""text-white font-semibold text-lg"">
                    {count}
                  </div>
                  <div className=""text-white/80 text-xs"">
                    {categoryLabel}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </motion.div>
      )}
    </div>
  );
};

export default FavoritesScreen;
"
src/components/Navigation.tsx,"import React, { useMemo } from 'react';
import { motion } from 'framer-motion';
import { Home, Sparkles, Heart } from 'lucide-react';
import type { NavigationProps, Screen } from '@/types';

interface NavItem {
  id: string;
  icon: React.ComponentType<{ className?: string }>;
  label: string;
  screen: Screen;
  badge?: number;
}

const Navigation: React.FC<NavigationProps> = ({ 
  currentScreen, 
  onNavigate, 
  favoritesCount 
}) => {
  const navItems: NavItem[] = useMemo(() => [
    {
      id: 'home',
      icon: Home,
      label: 'Accueil',
      screen: 'welcome'
    },
    {
      id: 'discover',
      icon: Sparkles,
      label: 'D√©couvrir',
      screen: 'swipe'
    },
    {
      id: 'favorites',
      icon: Heart,
      label: 'Favoris',
      screen: 'favorites',
      badge: favoritesCount > 0 ? favoritesCount : undefined
    }
  ], [favoritesCount]);

  const handleNavigation = (screen: Screen): void => {
    if (currentScreen !== screen) {
      onNavigate(screen);
    }
  };

  return (
    <motion.div
      initial={{ y: 100 }}
      animate={{ y: 0 }}
      className=""fixed bottom-0 left-0 right-0 z-40""
    >
      <div className=""bg-white/90 backdrop-blur-lg border-t border-white/20 px-6 py-4"">
        <div className=""flex justify-around items-center max-w-sm mx-auto"">
          {navItems.map((item: NavItem) => {
            const Icon = item.icon;
            const isActive: boolean = currentScreen === item.screen;

            return (
              <motion.button
                key={item.id}
                whileTap={{ scale: 0.95 }}
                onClick={() => handleNavigation(item.screen)}
                className={`flex flex-col items-center gap-1 p-2 rounded-xl transition-all relative focus:outline-none focus:ring-2 focus:ring-blue-300 ${
                  isActive 
                    ? 'text-blue-600' 
                    : 'text-gray-500 hover:text-gray-700'
                }`}
                aria-label={`Naviguer vers ${item.label}`}
                aria-current={isActive ? 'page' : undefined}
              >
                {/* Active indicator */}
                {isActive && (
                  <motion.div
                    layoutId=""nav-indicator""
                    className=""absolute -top-1 left-1/2 transform -translate-x-1/2 w-6 h-1 bg-blue-600 rounded-full""
                  />
                )}

                <div className=""relative"">
                  <Icon className={`w-6 h-6 ${isActive ? 'text-blue-600' : ''}`} />

                  {/* Badge for favorites */}
                  {item.badge && item.badge > 0 && (
                    <motion.div
                      key={`badge-${item.badge}`} // Key pour forcer la re-animation
                      initial={{ scale: 0 }}
                      animate={{ scale: 1 }}
                      exit={{ scale: 0 }}
                      className=""absolute -top-2 -right-2 min-w-[1.25rem] h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center font-medium px-1""
                    >
                      {item.badge > 99 ? '99+' : item.badge}
                    </motion.div>
                  )}
                </div>

                <span className={`text-xs font-medium ${
                  isActive ? 'text-blue-600' : 'text-gray-500'
                }`}>
                  {item.label}
                </span>
              </motion.button>
            );
          })}
        </div>
      </div>
    </motion.div>
  );
};

export default Navigation;
"
index.html,"<!doctype html>
<html lang=""fr"">
  <head>
    <meta charset=""UTF-8"" />
    <link rel=""icon"" type=""image/svg+xml"" href=""/activity-icon.svg"" />
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"" />
    <title>ActivitySwipe - D√©couvrez votre prochaine passion</title>
    <meta name=""description"" content=""D√©couvrez des activit√©s cr√©atives et hobbies pr√®s de chez vous par simple swipe"">
    <meta name=""theme-color"" content=""#667eea"">
  </head>
  <body>
    <div id=""root""></div>
    <script type=""module"" src=""/src/main.tsx""></script>
  </body>
</html>
"
.eslintrc.json,"{
  ""env"": {
    ""browser"": true,
    ""es2020"": true
  },
  ""extends"": [
    ""eslint:recommended"",
    ""@typescript-eslint/recommended"",
    ""plugin:react/recommended"",
    ""plugin:react-hooks/recommended"",
    ""plugin:react/jsx-runtime""
  ],
  ""ignorePatterns"": [""dist"", "".eslintrc.cjs""],
  ""parser"": ""@typescript-eslint/parser"",
  ""parserOptions"": {
    ""ecmaVersion"": ""latest"",
    ""sourceType"": ""module"",
    ""ecmaFeatures"": {
      ""jsx"": true
    }
  },
  ""plugins"": [""react-refresh"", ""@typescript-eslint""],
  ""rules"": {
    ""react-refresh/only-export-components"": [
      ""warn"",
      { ""allowConstantExport"": true }
    ],
    ""@typescript-eslint/no-unused-vars"": [""error"", { ""argsIgnorePattern"": ""^_"" }],
    ""@typescript-eslint/explicit-function-return-type"": ""off"",
    ""@typescript-eslint/explicit-module-boundary-types"": ""off"",
    ""@typescript-eslint/no-explicit-any"": ""warn"",
    ""react/prop-types"": ""off""
  },
  ""settings"": {
    ""react"": {
      ""version"": ""detect""
    }
  }
}"
tsconfig.node.json,"{
  ""compilerOptions"": {
    ""composite"": true,
    ""skipLibCheck"": true,
    ""module"": ""ESNext"",
    ""moduleResolution"": ""bundler"",
    ""allowSyntheticDefaultImports"": true,
    ""strict"": true
  },
  ""include"": [""vite.config.ts""]
}"
vite.config.ts,"import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import { resolve } from 'path'

export default defineConfig({
  plugins: [react()],
  server: {
    host: true,
    port: 3000
  },
  resolve: {
    alias: {
      '@': resolve(__dirname, 'src'),
      '@/components': resolve(__dirname, 'src/components'),
      '@/data': resolve(__dirname, 'src/data'),
      '@/types': resolve(__dirname, 'src/types')
    }
  },
  build: {
    target: 'esnext',
    sourcemap: true
  }
})
"
README.md,"# üé® ActivitySwipe - TypeScript Edition

Une application React moderne avec TypeScript pour d√©couvrir des activit√©s cr√©atives et hobbies pr√®s de chez vous !

![ActivitySwipe Demo](https://img.shields.io/badge/React-18.3-blue) ![TypeScript](https://img.shields.io/badge/TypeScript-5.2-blue) ![Vite](https://img.shields.io/badge/Vite-5.3-green) ![Tailwind](https://img.shields.io/badge/Tailwind-3.4-blue)

## ‚ú® Nouveaut√©s TypeScript

- **üõ°Ô∏è Type Safety Compl√®te** : Tous les composants strictement typ√©s
- **üìù Interfaces D√©finies** : Types pour activit√©s, props et √©tats
- **üéØ IntelliSense Avanc√©** : Auto-compl√©tion et d√©tection d'erreurs
- **üîß Path Mapping** : Imports simplifi√©s avec @/ aliases
- **‚ö° V√©rification Compilation** : Erreurs d√©tect√©es avant build

## üöÄ Installation Rapide TypeScript

### Pr√©requis
- Node.js 18+ 
- npm ou yarn
- Support TypeScript dans votre √©diteur

### √âtapes

1. **Clonez ou t√©l√©chargez le projet**
```bash
mkdir activity-swipe-ts
cd activity-swipe-ts
```

2. **Installez les d√©pendances TypeScript**
```bash
npm install
```

3. **V√©rifiez les types**
```bash
npm run typecheck
```

4. **Lancez en d√©veloppement**
```bash
npm run dev
```

5. **Construisez pour production**
```bash
npm run build
```

## üõ†Ô∏è Technologies TypeScript

### Frontend Typ√©
- **React 18.3** + **TypeScript 5.2** - Framework UI strictement typ√©
- **Vite 5.3** - Build tool avec support TS natif
- **Framer Motion 11** - Animations avec types
- **Tailwind CSS 3.4** - Styles avec IntelliSense
- **Lucide React** - Ic√¥nes typ√©es

### Fonctionnalit√©s TypeScript
- **Interfaces Compl√®tes** - Types pour toutes les donn√©es
- **Props Validation** - V√©rification automatique des props
- **State Management Typ√©** - useState avec types stricts
- **Event Handlers Typ√©s** - Gestion d'√©v√©nements s√©curis√©e
- **Path Mapping** - Imports propres avec @/ aliases

## üìÅ Structure TypeScript

```
activity-swipe-ts/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ types/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts              # Types et interfaces globaux
‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ WelcomeScreen.tsx     # √âcran d'accueil typ√©
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ SwipeInterface.tsx    # Interface de swipe typ√©e
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ FavoritesScreen.tsx   # Liste des favoris typ√©e
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Navigation.tsx        # Navigation typ√©e
‚îÇ   ‚îú‚îÄ‚îÄ data/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ activities.ts         # Donn√©es typ√©es
‚îÇ   ‚îú‚îÄ‚îÄ App.tsx                   # App principal typ√©
‚îÇ   ‚îú‚îÄ‚îÄ main.tsx                  # Point d'entr√©e TS
‚îÇ   ‚îú‚îÄ‚îÄ vite-env.d.ts            # Types Vite
‚îÇ   ‚îî‚îÄ‚îÄ index.css                 # Styles globaux
‚îú‚îÄ‚îÄ tsconfig.json                 # Config TypeScript
‚îú‚îÄ‚îÄ tsconfig.node.json            # Config TS pour build
‚îú‚îÄ‚îÄ vite.config.ts                # Config Vite typ√©e
‚îú‚îÄ‚îÄ .eslintrc.json                # ESLint + TypeScript
‚îî‚îÄ‚îÄ package.json                  # D√©pendances TS
```

## üéØ Types D√©finis

### Interfaces Principales
```typescript
interface Activity {
  id: number;
  title: string;
  category: ActivityCategory;
  description: string;
  location: string;
  price: string;
  duration: string;
  level: ActivityLevel;
  image: string;
}

type ActivityCategory = 
  | 'art_creativity'
  | 'sport_fitness' 
  | 'wellness'
  | 'culture'
  | 'learning'
  | 'gastronomy';
```

### Props des Composants
```typescript
interface SwipeInterfaceProps {
  onActivityLiked: (activity: Activity) => void;
  favoritesCount: number;
}

interface FavoritesScreenProps {
  favorites: FavoriteActivity[];
  onRemoveFavorite: (activityId: number) => void;
}
```

## üîß Scripts TypeScript

- `npm run dev` - Lance le serveur de d√©veloppement avec TS
- `npm run build` - Build avec v√©rification TypeScript
- `npm run preview` - Pr√©visualise la version de production
- `npm run typecheck` - V√©rifie les types sans build
- `npm run lint` - ESLint avec r√®gles TypeScript

## üé® Avantages TypeScript

### D√©veloppement
- ‚úÖ **Auto-compl√©tion intelligente** dans l'√©diteur
- ‚úÖ **D√©tection d'erreurs en temps r√©el**
- ‚úÖ **Refactoring s√ªr** avec renommage automatique
- ‚úÖ **Documentation int√©gr√©e** via les types

### Production  
- ‚úÖ **Moins de bugs runtime** gr√¢ce au type checking
- ‚úÖ **Maintenance simplifi√©e** avec contrats clairs
- ‚úÖ **Performance optimis√©e** par le compilateur
- ‚úÖ **Scalabilit√© am√©lior√©e** pour grandes √©quipes

## üîÑ Migration JavaScript ‚Üí TypeScript

Si vous venez de la version JavaScript :

1. **Extensions chang√©es** : `.jsx` ‚Üí `.tsx`, `.js` ‚Üí `.ts`
2. **Types ajout√©s** : Props, state et fonctions typ√©es
3. **Imports mis √† jour** : Path mapping avec @/ aliases
4. **Configuration √©tendue** : tsconfig.json et ESLint TS

## üìù Personnalisation TypeScript

### Ajouter une nouvelle activit√© typ√©e
```typescript
const newActivity: Activity = {
  id: 16,
  title: ""Votre Activit√©"",
  category: ""art_creativity"", // Type v√©rifi√©
  description: ""Description..."",
  location: ""Votre Ville"",
  price: ""CHF XX"",
  duration: ""Xh"", 
  level: ""D√©butant"", // Type v√©rifi√©
  image: ""https://...""
};
```

### Cr√©er un nouveau composant
```typescript
import type { FC } from 'react';

interface MyComponentProps {
  title: string;
  onClick: () => void;
}

const MyComponent: FC<MyComponentProps> = ({ title, onClick }) => {
  return <button onClick={onClick}>{title}</button>;
};
```

## üåü Fonctionnalit√©s TypeScript Avanc√©es

- **Union Types** pour les cat√©gories et niveaux
- **Utility Types** pour la manipulation des types
- **Generic Functions** pour les utilitaires
- **Conditional Types** pour la logique complexe
- **Path Mapping** pour les imports propres

## ü§ù Contribution TypeScript

Pour contribuer avec TypeScript :
1. Respectez les interfaces existantes
2. Utilisez les types stricts (pas de `any`)
3. Documentez vos types complexes
4. Testez avec `npm run typecheck`

## üìö Resources TypeScript

- [TypeScript Handbook](https://www.typescriptlang.org/docs/)
- [React + TypeScript Best Practices](https://react-typescript-cheatsheet.netlify.app/)
- [Vite TypeScript Guide](https://vitejs.dev/guide/features.html#typescript)

---

**D√©velopp√© avec ‚ù§Ô∏è et TypeScript pour une exp√©rience de d√©veloppement optimale !**
"
